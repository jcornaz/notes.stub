apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'jacoco'

project.group = 'com.toolable'
project.version = '1.0-develop'

sourceCompatibility = 1.6

javadoc.title = "Notes Stub " + project.version

buildscript {
    ext.kotlin_version = '1.0.2'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Notes Stub', 'Implementation-Version': project.version
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // IBM Copyrighted dependence
    compile files('libs/Notes.jar')

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.google.guava:guava:18.0'
    compile 'joda-time:joda-time:2.9.+'

    testCompile 'junit:junit:4.+'
    testCompile 'org.mockito:mockito-all:1.10.+'
}

test {
    testLogging.showStandardStreams = true

    beforeTest { descriptor ->
        logger.lifecycle("Running test: $descriptor")
    }

    onOutput { descriptor, event ->
        logger.lifecycle("Test: $descriptor produced : $event.message")
    }
}

jacocoTestReport.reports {
        xml.enabled = true
        html.enabled = true
}

task kotlinCoverageReport(dependsOn: 'jacocoTestReport') << {
    def reports = new File(project.buildDir, '/reports/jacoco/test/html')
    def index = new File(reports, 'index.html').getText('UTF-8')
    def footer = '<div class="footer">'
    def result = new StringBuilder(index.substring(0, index.indexOf(footer)))

    reports.eachDirMatch({ !new File(it).name.startsWith(".") }) { dir ->
        def moduleIndex = new File(dir, 'index.source.html')
        def content = moduleIndex.getText('UTF-8')
                .replaceAll('\\.\\./\\.resources', '.resources')
                .replaceAll('href="', "href=\"${dir.name}/")
        result.append(content.substring(content.indexOf('<h1>'), content.indexOf(footer)))
    }
    result.append(index.substring(index.indexOf(footer)))

    def output = new File(reports, 'index.kotlin.html')

    output.delete()
    output << result.toString()
    println("open $output.path")
}

check.dependsOn kotlinCoverageReport
